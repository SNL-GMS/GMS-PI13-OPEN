#!/bin/bash

# ------------------------------------------------------------------------------
# gmskube invocation script
#
# The gmskube (GMS Kubernetes Control) program is a Python script used to manage running
# instances of the GMS (Geophysical Monitoring System) system.
#
# The gmskube.py Python script is packaged up with all needed dependencies in
# a gmskube Docker image which is invoked by this bash script. Running gmskube
# requires that you have a local installation of Docker that is used to run
# this container, and a local installation of kubectl.
# ------------------------------------------------------------------------------

# ------------------------------------------------------------------------------
# Verify kubectl is present
# ------------------------------------------------------------------------------
if ! hash kubectl 2>/dev/null; then
    echo \
    "ERROR: 'kubectl' executable was not found in PATH. Please install kubectl."
    exit 1
fi

# ------------------------------------------------------------------------------
# Verify CI_DOCKER_REGISTRY is set
# ------------------------------------------------------------------------------
if [[ -z "${CI_DOCKER_REGISTRY}" ]]; then
    echo \
    "ERROR: Variable 'CI_DOCKER_REGISTRY' must be set to the docker registry hostname
            Example:
            > export CI_DOCKER_REGISTRY=gms-docker-registry.mydomain.com

            Consider adding this to your .bashrc
            "
    exit 1
fi

# ------------------------------------------------------------------------------
# Handle bash-side command-ine parsing.
#
# The gmskube Python script actually handles the MAJORITY of the command-line
# parsing, but we need to preprocess two arguments and handle some prep work
# before pulling the docker container and invoking the script.
#
#   --config: This is a local directory containing configuration overrides.
#             If specified, we need to volume mount that directory so gmskube
#             can see it inside the container. Since the directory name inside
#             the container will be different, we want to transform the argument
#             for gmskube so it is the path inside the container.
#
#   --tag: If a tag was specified, we also want to pull the gmskube
#          container for that tag instead of the one from develop.
# ------------------------------------------------------------------------------
gmskubeargs=()

# Consume our script arguments and build up the arguments for gmskube
while [ $# -gt 0 ]; do
    case "$1" in
      --config)
          # Extract the user supplied config overrides directory and shift the command line by 2 (to skip over flag and value)
          CONFIG_OVERRIDES=$2

          # --config is mounted as /overrides
          gmskubeargs+=("$1")
          gmskubeargs+=("/overrides")

          shift 2
          ;;
      --chart)
          # Extract the user supplied chart directory
          CHART_OVERRIDES=$2

          # --chart is mounted into /deploy
          gmskubeargs+=("$1")
          gmskubeargs+=("/deploy/custom")

          shift 2
          ;;
      --oracle-wallet)
          # Extract the user supplied Oracle Wallet overrides directory
          ORACLE_WALLET_OVERRIDES=$2

          # --oracle-wallet is mounted as /oracle-wallet
          gmskubeargs+=("$1")
          gmskubeargs+=("/oracle-wallet")

          shift 2
          ;;
      --tag)
          # Extract the user supplied tag name (used to reconcile GMSKUBE_TAG)
          TAG=$2

          # --tag should be propogated as-is to gmskube
          gmskubeargs+=("$1")
          gmskubeargs+=("$2")

          # Shift the command line by 2 (to skip over tag flag and value)
          shift 2
          ;;
      --)
          # Command line is done so break out
          break
          ;;
      *)
          # Append any other arguments to the gmskubeargs array to be passed on to docker run
          gmskubeargs+=("$1")
          shift
          ;;
    esac
done

# If GMSKUBE_TAG was NOT set but --tag WAS specified, use the tag name for GMSKUBE_TAG
if [ ! -n "${GMSKUBE_TAG}" -a -n "${TAG}" ]; then
    GMSKUBE_TAG=$TAG
fi

# Fix the GMSKUBE_TAG to match our system conventions
if [[ ! -z "${GMSKUBE_TAG}" ]]; then
    # sed replaces violating chars w/ dash and ensures no trailing/leading dashes, tr ensures lowercase and cut ensures it's <=63 chars
    export GMSKUBE_TAG=$(echo "$GMSKUBE_TAG" | sed -e 's/[^a-zA-Z0-9]/-/g' -e 's/^-//' -e 's/-$//' | tr '[:upper:]' '[:lower:]' | cut -c-63)
fi

# Pull the latest image unless GMSKUBE_NO_PULL is set
if [[ -z "${GMSKUBE_NO_PULL}" ]]; then
    # run without docker variables set to use the local docker daemon
    DOCKER_HOST= DOCKER_TLS_VERIFY= docker pull ${CI_DOCKER_REGISTRY}/gms-common/gmskube:${GMSKUBE_TAG:-develop}
    echo
fi

# If we are running from a TTY, use the -it option with docker run
if [ -t 1 ]; then TTY_OPT="-it"; fi

# Get the current kubectl context
export KUBECTL_CONTEXT=$(kubectl config view --minify --raw)
KUBECTL_CLUSTER=$(kubectl config view -o jsonpath='{.contexts[].context.cluster}' --minify --raw)
KUBECTL_DOMAIN=$(kubectl config view -o jsonpath='{.clusters[].cluster.server}' --minify --raw | awk -F $(echo "$KUBECTL_CLUSTER.") '{print $2}' | cut -f1 -d'/')
export KUBECTL_HOST=$(echo "$KUBECTL_CLUSTER"."$KUBECTL_DOMAIN")
# ------------------------------------------------------------------------------
# Run the image with KUBECTL_CONTEXT, CI_DOCKER_REGISTRY,
# and LOGNAME (login name) passed into container.
#
# This is run on the local docker daemon
# ------------------------------------------------------------------------------

if [ ! -z "${CONFIG_OVERRIDES}" ] ; then
    if [ ! -e ${CONFIG_OVERRIDES} ]; then
        echo "ERROR: specified --config directory '${CONFIG_OVERRIDES}' does not exist"
        exit 1
    fi
    # Expand the overrides to ensure this is the full path to the config dir
    CONFIG_DIR=$(cd ${CONFIG_OVERRIDES}; pwd)
    echo Using config directory: ${CONFIG_DIR}
    override_mount=("-v")
    override_mount+=("${CONFIG_DIR}:/overrides:ro")
fi

if [ ! -z "${CHART_OVERRIDES}" ] ; then
    if [ ! -e ${CHART_OVERRIDES} ]; then
        echo "ERROR: specified --chart directory '${CHART_OVERRIDES}' does not exist"
        exit 1
    fi
    # Expand the overrides to ensure this is the full path to the chart dir
    CHART_DIR=$(cd ${CHART_OVERRIDES}; pwd)
    echo Using chart directory: ${CHART_DIR}
    chart_mount=("-v")
    chart_mount+=("${CHART_DIR}:/deploy/custom:ro")
fi

if [ ! -z "${ORACLE_WALLET_OVERRIDES}" ] ; then
    if [ ! -e ${ORACLE_WALLET_OVERRIDES} ]; then
        echo "ERROR: specified --oracle-wallet directory '${ORACLE_WALLET_OVERRIDES}' does not exist"
        exit 1
    fi
    # Expand the overrides to ensure this is the full path to the Oracle Wallet dir
    ORACLE_WALLET_DIR=$(cd ${ORACLE_WALLET_OVERRIDES}; pwd)
    echo Using oracle wallet directory: ${ORACLE_WALLET_DIR}
    oracle_wallet_mount=("-v")
    oracle_wallet_mount+=("${ORACLE_WALLET_DIR}:/oracle-wallet:ro")
fi

DOCKER_HOST= DOCKER_TLS_VERIFY=  docker run --rm ${TTY_OPT} ${chart_mount[@]} ${override_mount[@]} ${oracle_wallet_mount[@]} -v ${PWD}:/gmskube:ro -e KUBECTL_CONTEXT -e KUBECTL_HOST -e CI_DOCKER_REGISTRY -e LOGNAME ${CI_DOCKER_REGISTRY}/gms-common/gmskube:${GMSKUBE_TAG:-develop} "${gmskubeargs[@]}"
