{{- $appName := "config-loader" }}
{{- $appValues := get .Values $appName }}
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: {{ $appName }}
spec:
  accessModes:
    - ReadWriteOnce
  storageClassName: {{ .Values.storageClassName }}
  resources:
    requests:
      storage: {{ $appValues.storageSize }}
{{/* Remove the Deployment if the app's restartDuringReconfig and the reconfigInProgress value are both true */}}
{{- if not (and $appValues.restartDuringReconfig .Values.reconfigInProgress) }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ $appName }}
spec:
  replicas: {{ $appValues.replicas }}
  strategy:
    type: {{ include "soh.deployment.strategy" (dict "Values" .Values "appValues" $appValues) }}
  selector:
    matchLabels:
      app: {{ $appName }}
  template:
    metadata:
      labels:
        app: {{ $appName }}
    spec:
      serviceAccount: gms-soh-elevated
      volumes:
        - name: state
          persistentVolumeClaim:
            claimName: "{{ $appName }}"
      containers:
        - name: {{ $appName }}
          image: {{ include "soh.deployment.image" (dict "Values" .Values "appValues" $appValues) }}
          imagePullPolicy: {{ .Values.imagePullPolicy }}
          env: {{- include "soh.app.deployment.env" (dict "appName" $appName "appEnv" $appValues.env "globalEnv" .Values.env "context" $) }}
          ports:
            - containerPort: 8080
          volumeMounts:
            - name: state
              mountPath: /config-loader/app/state
{{- if or (and $appValues.cpu_requests $appValues.cpu_limit) (and $appValues.memory_requests $appValues.memory_limit)}}
          resources:
            requests:
{{- if ($appValues.cpu_requests)}}
              cpu: {{ $appValues.cpu_requests }}
{{- end }}
{{- if ($appValues.memory_requests)}}
              memory: {{ $appValues.memory_requests }}
{{- end }}
            limits:
{{- if ($appValues.cpu_limit)}}
              cpu: {{ $appValues.cpu_limit }}
{{- end }}
{{- if ($appValues.memory_limit)}}
              memory: {{ $appValues.memory_limit }}
{{- end }}
{{- end }}
{{- end }}
---
apiVersion: v1
kind: Service
metadata:
  name: {{ $appName }}
spec:
  type: ClusterIP
  ports:
    - name: http
      port: 8080
      protocol: TCP
      targetPort: 8080
  selector:
    app: {{ $appName }}
---
apiVersion: networking.k8s.io/v1beta1
kind: Ingress
metadata:
  name: {{ $appName }}
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
spec:
  tls:
    - secretName: ingress-default-cert
      hosts:
        - "{{ $appName }}-{{ .Release.Name }}.{{ .Values.baseDomain }}"
  rules:
  - host: "{{ $appName }}-{{ .Release.Name }}.{{ .Values.baseDomain }}"
    http:
      paths:
      - path: /
        backend:
          serviceName: {{ $appName }}
          servicePort: 8080
